import unittest,sys
from io import StringIO
from unittest.mock import patch
from task import write_to_csv, calculate_revenue_by_month, calculate_customer_revenue, calculate_revenue_by_product,get_top_10_customers

class TestOrderAnalysis(unittest.TestCase):
    def setUp(self):
        # Redirect stdout to capture print statements
        self.held_output = StringIO()
        sys.stdout = self.held_output

    def tearDown(self):
        # Reset redirect.
        sys.stdout = sys.__stdout__

    def test_writer_csv(self):
        # Check if the CSV file is created
        csv_file_path = 'orders.csv'
        write_to_csv(csv_file_path)
        with open('orders.csv', 'r') as file:
            data = file.read()
            self.assertNotEqual(len(data), 0)

    def test_revenue_generated_in_each_month(self):
        # Mock the CSV file content
        csv_file_path = 'orders.csv'
        csv_data = "Order_ID,Customer_ID,Order_Date,Product_ID,Product_Name,Product_Price,Quantity\n1,101,01-01-22,1,Product1,50.0,2\n"
        with patch('builtins.open', return_value=StringIO(csv_data)):
            calculate_revenue_by_month(csv_file_path)
        
        # Capture and check the printed output
        output = self.held_output.getvalue().strip()
        self.assertIn("Month: January, Total Revenue generated in each month: 100.0", output)

    def test_revenue_generated_by_each_product(self):
        # Mock the CSV file content
        csv_file_path = 'orders.csv'
        csv_data = "Order_ID,Customer_ID,Order_Date,Product_ID,Product_Name,Product_Price,Quantity\n1,101,01-01-22,1,Product1,50.0,2\n"
        with patch('builtins.open', return_value=StringIO(csv_data)):
            calculate_revenue_by_product(csv_file_path)

        # Capture and check the printed output
        output = self.held_output.getvalue().strip()
        self.assertIn("Product Name: Product1, Total Revenue generated by product: 100.0", output)

    def test_customer_revenue(self):
        # Mock the CSV file content
        csv_file_path = 'orders.csv'
        csv_data = "Order_ID,Customer_ID,Order_Date,Product_ID,Product_Name,Product_Price,Quantity\n1,101,01-01-22,1,Product1,50.0,2\n"
        with patch('builtins.open', return_value=StringIO(csv_data)):
            calculate_customer_revenue(csv_file_path)

        # Capture and check the printed output
        output = self.held_output.getvalue().strip()
        self.assertIn("Customer ID: 101, Total Revenue generated by customer: 100.0", output)

    def test_top_10_customer(self):
        # Mock the CSV file content
        csv_file_path = 'orders.csv'
        csv_data = "Order_ID,Customer_ID,Order_Date,Product_ID,Product_Name,Product_Price,Quantity\n1,101,01-01-22,1,Product1,50.0,2\n"
        with patch('builtins.open', return_value=StringIO(csv_data)):
            get_top_10_customers(csv_file_path)

        # Capture and check the printed output
        output = self.held_output.getvalue().strip()
        self.assertIn("Customer ID: 101, Total Revenue generated by customer: 100.0", output)

if __name__ == '__main__':
    unittest.main()